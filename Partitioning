public Map<Boolean, List<Integer>> partitionPrimes(int n) {
return IntStream.rangeClosed(2, n).boxed()
.collect(partitioningBy(candidate -> isPrime(candidate));
}

public boolean isPrime(int candidate) {
int candidateRoot = (int) Math.sqrt((double) candidate);
return IntStream.rangeClosed(2, candidateRoot)
.noneMatch(i -> candidate % i == 0);
}

public static boolean isPrime(List<Integer> primes, int candidate) {
return primes.stream().noneMatch(i -> candidate % i == 0);
}

public static <A> list<A> takeWhile(List<A> list, Predicate<A> p)
 {
    int i = 0;
    for ( A item : list) {
            if( !p.test(item)){
                  return list.sublist(0,i);
            }    
            i++;
    }    
    return list;    
 }
 
public static boolean isPrime(List<Integer> primes, int candidate){
int candidateRoot = (int) Math.sqrt((double) candidate);
return takeWhile(primes, i -> i <= candidateRoot)
.stream()
.noneMatch(p -> candidate % p == 0);
}


public BinaryOperator<Map<Boolean, List<Integer>>> combiner() {
return (Map<Boolean, List<Integer>> map1,
Map<Boolean, List<Integer>> map2) -> {
map1.get(true).addAll(map2.get(true));
map1.get(false).addAll(map2.get(false));
return map1;
};
}

public Function<Map<Boolean, List<Integer>>,

Map<Boolean, List<Integer>>> finisher() {
return Function.identity();
}
public Set<Characteristics> characteristics() {
return Collections.unmodifiableSet(EnumSet.of(IDENTITY_FINISH));
}


public Map<Boolean, List<Integer>> partitionPrimesWithCustomCollector(int n) 
{
return IntStream.rangeClosed(2, n).boxed().collect(new PrimeNumbersCollector());
}




