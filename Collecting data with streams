Map<Currency, List<Transaction>> transactionsByCurrencies = transactions.stream().collect(groupingBy(Transaction::getCurrency));

List<Transaction> transactions = transactionStream.collect(Collectors.toList());

long howManyDishes = menu.stream().collect(Collectors.counting());
You can write this far more directly as
long howManyDishes = menu.stream().count();

import static java.util.stream.Collectors.*;

Comparator<Dish> dishCaloriesComparator =Comparator.comparingInt(Dish::getCalories);
Optional<Dish> mostCalorieDish =menu.stream().collect(maxBy(dishCaloriesComparator));

int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));
double avgCalories = menu.stream().collect(averagingInt(Dish::getCalories));

Collectors.summingLong Collectors.summingDouble

IntSummaryStatistics menuStatistics = menu.stream().collect(summarizingInt(Dish::getCalories));
String shortMenu = menu.stream().map(Dish::getName).collect(joining());
String shortMenu = menu.stream().collect(joining());
String shortMenu = menu.stream().map(Dish::getName).collect(joining(", "));

int totalCalories = menu.stream().collect(reducing(0, Dish::getCalories, (i, j) -> i + j));
Optional<Dish> mostCalorieDish = menu.stream().collect(reducing((d1, d2) -> d1.getCalories() > d2.getCalories() ? d1 : d2));
------------
Stream<Integer> stream = Arrays.asList(1, 2, 3, 4, 5, 6).stream();
List<Integer> numbers = stream.reduce(
                                       new ArrayList<Integer>(),
                                        (List<Integer> l, Integer e) -> {
                                       l.add(e);
                                       return l; },
                                       (List<Integer> l1, List<Integer> l2) -> {
                                       l1.addAll(l2);
                                        return l1; });
                                        

int totalCalories = menu.stream().collect(reducing(0,Dish::getCalories,Integer::sum));

public static <T> Collector<T, ?, Long> counting() {return reducing(0L, e -> 1L, Long::sum);}

int totalCalories = menu.stream().map(Dish::getCalories).reduce(Integer::sum).get();
int totalCalories = menu.stream().mapToInt(Dish::getCalories).sum();
String shortMenu = menu.stream().map(Dish::getName).collect(joining());
String shortMenu = menu.stream().map(Dish::getName).collect( reducing( (s1, s2) -> s1 + s2 ) ).get();
String shortMenu = menu.stream().collect( reducing( (d1, d2) -> d1.getName() + d2.getName() ) ).get();
String shortMenu = menu.stream().collect( reducing( "", Dish::getName, (s1, s2) -> s1 + s2 ) );

------------------------------Grouping---------------------------------

Map<Dish.Type, List<Dish>> dishesByType = menu.stream().collect(groupingBy(Dish::getType));

public enum CaloricLevel { DIET, NORMAL, FAT }
Map<CaloricLevel, List<Dish>> dishesByCaloricLevel = menu.stream().collect(
groupingBy(dish -> {
if (dish.getCalories() <= 400) return CaloricLevel.DIET;
else if (dish.getCalories() <= 700) return
CaloricLevel.NORMAL;
else return CaloricLevel.FAT;
} ));


-----------------------Multilevel Grouping-------------------------
Map<Dish.Type, Map<CaloricLevel, List<Dish>> dishesByTypeCaloricLevel = 
              menu.stream().collect(  
                                     groupingBy(Dish::getType,
                                               groupingBy(dish ->
                                                {
                                                if (dish.getCalories() <= 400) return CaloricLevel.DIET;
                                                    else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
                                                else return CaloricLevel.FAT;
                                               })
                                    )
                                 );
                                 

Map<Dish.Type, Long> typesCount = menu.stream().collect(groupingBy(Dish::getType, counting()));
Map<Dish.Type, Optional<Dish>> mostCaloricByType = menu.stream() .collect(groupingBy(Dish::getType,maxBy(comparingInt(Dish::getCalories))));

Map<Dish.Type,Dish> mostCaloricByType = menu.stream().collect(groupingBy(Dish::getType,
                                                              collectingAndThen(
                                                                  maxBy(comparingInt(Dish::getCalories)}.
                                                                  Optional::get)));

Map<Dish.Type, Integer> totalCaloriesByType = menu.stream().collect(groupingBy(Dish::getType,summingInt(Dish::getCalories)));

Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType = menu.stream().collect(
groupingBy(Dish::getType, mapping(dish -> { if (dish.getCalories() <= 400) return CaloricLevel.DIET;
else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL; else return CaloricLevel.FAT; }, toSet() )));
                                                               


Map<Dish.Type, Set<CaloricLevel>> caloricLevelsByType =
menu.stream().collect(groupingBy(Dish::getType, mapping(
dish -> { if (dish.getCalories() <= 400) return CaloricLevel.DIET;
else if (dish.getCalories() <= 700) return CaloricLevel.NORMAL;
else return CaloricLevel.FAT; },toCollection(HashSet::new) )));


----------------------------------------Partitioning-------------------------------
Map<Boolean, List<Dish>> partitionedMen = menu.stream().collect(partitioningBy(Dish::isVegetarian));

List<Dish> vegetarianDishes =  menu.stream().filter(Dish::isVegetarian).collect(toList());

Map<Boolean, Map<Dish.Type,List<Dish>> vegetarianDisheshByType = menu.stream().collect(partitioningBy(Dish::isVegetarian, 
                                  groupingBy(Dish::getType)));
                                  

Map<Boolean, Dish> mostCaloricPartitionedByVegetarian =menu.stream().collect(partitioningBy(Dish::isVegetarian,collectingAndThen(maxBy(comparingInt(Dish::getCalories)),Optional::get)));









